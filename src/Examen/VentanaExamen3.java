/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Examen;

import java.text.NumberFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Ignacio
 */
public class VentanaExamen3 extends javax.swing.JFrame {

    //Definimos las Constantes
    final double VELOCIDAD_MAX  = 10.0;
    final double CERO_DOUBLE    = 0.0;
    final double VELOCIDAD_A    = 1.5;
    final String DESC_VELOC_A   = "Andando";
    final double VELOCIDAD_B    = 3.7;
    final String DESC_VELOC_B   = "Marcha";
    final double VELOCIDAD_C    = 5.2;
    final String DESC_VELOC_C   = "Maratón";
    final double VELOCIDAD_D    = 7.9;
    final String DESC_VELOC_D   = "Sprint";
    final int    TIEMPO_TOTAL   = 10;
    final int    VELOCIDAD_LEON = 16;
    final double DISTANCIA_LEON = -100.0;
    
    //Definimos el Logger
    final Logger LOGGER = Logger.getLogger("examen3.VentanaExamen3");
    
    
    /**
     * Creates new form VentanaExamen3
     */
    public VentanaExamen3() {
        initComponents();
        
        //Establecemos el Nivel del Log
        LOGGER.setLevel(Level.FINE);
        
        //Centramos la ventana
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTFVelocidad = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jCBVelocAsig = new javax.swing.JComboBox();
        jBAsignarVelocidad = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTAHistorico = new javax.swing.JTextArea();
        jBCorrerSolo = new javax.swing.JButton();
        jBHuirLeon = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simulador de Persona en Carrera");

        jLabel1.setText("Velocidad:");

        jLabel2.setText("m/s");

        jCBVelocAsig.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Andando (1.5 m/s)", "Marcha (3.7 m/s)", "Maratón (5.2 m/s)", "Sprint (7.9 m/s)" }));

        jBAsignarVelocidad.setText("Asignar Velocidad");
        jBAsignarVelocidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAsignarVelocidadActionPerformed(evt);
            }
        });

        jTAHistorico.setColumns(20);
        jTAHistorico.setRows(5);
        jScrollPane1.setViewportView(jTAHistorico);

        jBCorrerSolo.setText("Correr Solo");
        jBCorrerSolo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCorrerSoloActionPerformed(evt);
            }
        });

        jBHuirLeon.setText("Huir del León");
        jBHuirLeon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBHuirLeonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTFVelocidad, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCBVelocAsig, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jBAsignarVelocidad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBCorrerSolo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBHuirLeon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTFVelocidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jCBVelocAsig, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBAsignarVelocidad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBCorrerSolo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBHuirLeon))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBCorrerSoloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCorrerSoloActionPerformed
        
        //Inicializamos el Text Area
        jTAHistorico.setText("");
        
        //Validamos si en el Campo de Velocidad se ha introducido un numero
        if (validaVelocidad()){
            
            //Para formatear los Decimales de Salida
            NumberFormat formatoNumero = NumberFormat.getNumberInstance();
            formatoNumero.setMaximumFractionDigits(2);
            
            //Para Acumular la Distancia
            double distancia = CERO_DOUBLE;
            double velocidad = Double.parseDouble(jTFVelocidad.getText());
            
            //Bucle de 10 segundos
            for (int x=0; x < TIEMPO_TOTAL; x++){
                //Como la velocidad esta medida en m/s no hay que multiplicar
                distancia = distancia + velocidad;
                
                //Sacamos por pantalla la Distancia Recorrida
                jTAHistorico.append("" + (x+1) + "s: " + formatoNumero.format(distancia) + " metros\n");
            }            
        }
    }//GEN-LAST:event_jBCorrerSoloActionPerformed

    private void jBAsignarVelocidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAsignarVelocidadActionPerformed
        
        double velocidad = CERO_DOUBLE;
        String desVeloci = "";

        //Asignamos la Velocidad
        switch(jCBVelocAsig.getSelectedIndex()){
            case 0:
                velocidad = VELOCIDAD_A;
                desVeloci = DESC_VELOC_A;
                break;
            case 1:
                velocidad = VELOCIDAD_B;
                desVeloci = DESC_VELOC_B;
                break;
            case 2:
                velocidad = VELOCIDAD_C;
                desVeloci = DESC_VELOC_C;
                break;
            case 3:
                velocidad = VELOCIDAD_D;
                desVeloci = DESC_VELOC_D;
                break;
        }
        //Asignamos la Velocidad Escogida al Campo de Texto de Velocidad
        jTFVelocidad.setText(String.valueOf(velocidad));
        String mensaje = "El usuario ha seleccionado velocidad tipo " +jCBVelocAsig.getSelectedIndex() + " (" + desVeloci + ")";
        LOGGER.info(mensaje);
    }//GEN-LAST:event_jBAsignarVelocidadActionPerformed

    private void jBHuirLeonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBHuirLeonActionPerformed
        //Inicializamos el Text Area
        jTAHistorico.setText("");
        
        //Validamos si en el Campo de Velocidad se ha introducido un numero
        if (validaVelocidad()){
            
            //Para formatear los Decimales de Salida
            NumberFormat formatoNumero = NumberFormat.getNumberInstance();
            formatoNumero.setMaximumFractionDigits(2);
            
            //Para Acumular la Distancia
            double distanciaPersona = CERO_DOUBLE;
            double distanciaLeon    = DISTANCIA_LEON;
            double velocidadPersona = Double.parseDouble(jTFVelocidad.getText());
            double velocidadLeon    = VELOCIDAD_LEON;                    
                    
            //Bucle de 10 segundos
            for (int x=0; (x < TIEMPO_TOTAL) && (distanciaLeon < distanciaPersona); x++){
                //Como la velocidad esta medida en m/s no hay que multiplicar
                distanciaPersona = distanciaPersona + velocidadPersona;
                distanciaLeon    = distanciaLeon    + velocidadLeon;
                
                //Sacamos por pantalla la Distancia Recorrida
                jTAHistorico.append("" + (x+1) + "s: " + formatoNumero.format(distanciaPersona) + " metros humano / " + formatoNumero.format(distanciaLeon) + " metros león \n");
            }
            //Si se ha Escapado
            if (distanciaLeon < distanciaPersona)
                jTAHistorico.append("\n!!BIENN, SE HA ESCAPADO DEL LEÓN!!");
            else
                jTAHistorico.append("\n!!OHHHH, TE HA COMIDO EL LEÓN!!");
        }
    }//GEN-LAST:event_jBHuirLeonActionPerformed

    //Validamos si la Velocidad Introducida es Correcta
    private boolean validaVelocidad(){
        
        try{
            //Pasamos la velocidad a una Variable de tipo Double
            double velocidad = Double.parseDouble(jTFVelocidad.getText());
            
            //La velocidad no puede ser 0
            if (velocidad == CERO_DOUBLE){
                jTAHistorico.setText("No quiero quedarme parado");                
                return false;
            }
            //La velocidad no puede ser menor a 0
            else if (velocidad < CERO_DOUBLE){
                jTAHistorico.setText("No quiero correr hacia atrás");                
                return false;
            }
            //La velocidad no puede ser Mayor a 10
            else if (velocidad > VELOCIDAD_MAX){
                jTAHistorico.setText("No soy Superman");                
                return false;
            }
            //En caso contrario -> La velocidad es Correcta
            else{
                //La velocidad es Correcta
                return true;
            }            
        } catch(NumberFormatException ex){
            
            //Mostramos Mensaje en en Log
            LOGGER.warning("Error, Debe indicar una cantidad numérica");
            ex.printStackTrace();
            
            //Mensaje de Alerta
            JOptionPane.showMessageDialog(
                        this,
                        "Error, Debe indicar una cantidad numérica",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            //False
            return false;
        } 
        //Si se produce otro tipo de Excepcion Desconocida
        catch(Exception ex){
            
            //Mostramos Mensaje en en Log
            LOGGER.warning("Error, Error Desconocido");
            ex.printStackTrace();

            //Mensaje de Alerta
            JOptionPane.showMessageDialog(
                        this,
                        "Error Desconocido",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            //False
            return false;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaExamen3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaExamen3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaExamen3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaExamen3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaExamen3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAsignarVelocidad;
    private javax.swing.JButton jBCorrerSolo;
    private javax.swing.JButton jBHuirLeon;
    private javax.swing.JComboBox jCBVelocAsig;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTAHistorico;
    private javax.swing.JTextField jTFVelocidad;
    // End of variables declaration//GEN-END:variables
}
